#!/usr/bin/env bash
# This script serves as an example on how to build and run a virtual environment with PTtools on a Slurm cluster.
# Please feel free to copy this script to your repository and to edit it to suit your needs.

#SBATCH --job-name=pttools-tests-conda
# Account configuration is required on CSC clusters
# #SBATCH --account=YOUR_GROUP_HERE
#SBATCH --partition=test
#SBATCH --time=00:10:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --mem-per-cpu=1G
#SBATCH --output=pttools-tests-python.out
set -e

echo "Running on $(hostname --fqdn)"

# When using this script in another project,
# please edit this line so that it points to the root of the repository.
PROJECT_DIR="$(realpath "..")"
cd "${PROJECT_DIR}"
echo "PTtools is located at: ${PROJECT_DIR}"

if command -v "module" &> /dev/null; then
  if [[ "$(hostname --fqdn)" == *grid.helsinki.fi ]]; then
    # For the Kale cluster of the University of Helsinki
    # https://wiki.helsinki.fi/display/it4sci/Kale+User+Guide
    module load Python/3.8.2-GCCcore-9.3.0
  else
    # For CSC clusters
    # https://docs.csc.fi/apps/python/
    # module load fgci-common
    module load python-env
    # Fix for over-eager Anaconda package configuration
    unset PYTHONPATH
  fi
else
  echo "Warning! Module management system was not found."
fi

VENV_DIR="${PROJECT_DIR}/venv"
if [ ! -d "${VENV_DIR}" ]; then
  echo "Creating virtualenv at: ${VENV_DIR}"
  if python3 -c "import sys; sys.exit(sys.version_info < (3, 9, 0))"; then
    # 3.9 or later
    python3 -m venv --upgrade-deps "${VENV_DIR}"
  else
    echo "Python version is older than 3.9. Please consider upgrading."
    python3 -m venv "${VENV_DIR}"
  fi
else
  echo "Using virtualenv at: ${VENV_DIR}"
fi
source "${VENV_DIR}/bin/activate"

# Override pip cache directory for Kale to avoid hitting the disk quota limits
if [ -z "${WRKDIR}" ]; then
  PIP_CACHE_DIR="$(pip cache dir)"
else
  PIP_CACHE_DIR="${WRKDIR}/cache/pip"
fi
echo "Using pip cache at: ${PIP_CACHE_DIR}"

pip --cache-dir="${PIP_CACHE_DIR}" install --upgrade pip
pip --cache-dir="${PIP_CACHE_DIR}" install --upgrade wheel
# When using this script for another project that uses PTtools,
# please add something like "pip install pttools-gw" here.
# See the PTtools documentation for more exact instructions.
pip --cache-dir="${PIP_CACHE_DIR}" install -r "${PROJECT_DIR}/requirements.txt" -r "${PROJECT_DIR}/requirements-dev.txt"

# Print Numba system information for debugging installation issues
numba --sysinfo

# Use as many CPU cores as available to the job according to the Slurm job configuration
# instead of the number of physical CPUs.
NUM_CPUS="$(python -c "import os; print(len(os.sched_getaffinity(0)))")"

# You can replace this with your own workload
if command -v "srun" &> /dev/null; then
  srun pytest --numprocesses="${NUM_CPUS}"
else
  echo "Warning! Slurm was not found. Running directly."
  pytest --numprocesses="${NUM_CPUS}"
fi
