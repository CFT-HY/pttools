name: CI
on: push
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
      - name: Print Python version
        run: python -V
      - name: Checkout
        uses: actions/checkout@v2
      - name: Load pip cache
        uses: actions/cache@v2
        with:
          path: .pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
            pip-
      - name: Install requirements
        run: |
          pip --cache-dir=.pip install --upgrade pip
          pip --cache-dir=.pip install pylint
          pip --cache-dir=.pip install -r requirements.txt
      - name: Run Pylint
        run: pylint pttools tests 2>&1 | tee pylint.txt
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: Lint
          path: |
            ${{ github.workspace }}/pylint.txt
          if-no-files-found: error
  graph:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
      - name: Print Python version
        run: python -V
      - name: Install graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
      - name: Checkout
        uses: actions/checkout@v2
      - name: Load pip cache
        uses: actions/cache@v2
        with:
          path: .pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
            pip-
      - name: Install requirements
        run: |
          pip --cache-dir=.pip install --upgrade pip
          pip --cache-dir=.pip install "pyan3 >=1.1.1, !=1.2.0" pylint
          pip --cache-dir=.pip install -r requirements.txt
      - name: Run Pyreverse
        run: |
          mkdir uml
          pyreverse pttools -o png -d ./uml
          pyreverse pttools -o svg -d ./uml
      - name: Run Pyan
        # -a = --annotated
        # -c = --colored
        # -e = --nested-groups
        run: |
          mkdir call_graphs
        # Call graphs of the entire project are broken at the moment:
        # "KeyError: <Node import:pttools.bubble.bubble>"
        # pyan3 "./**/*.py" -a -c -e --dot > ./call_graphs/call_graph_all.dot
        # pyan3 "./**/*.py" -a -c -e --html > ./call_graphs/call_graph_all.html
        # pyan3 "./**/*.py" -a -c -e --svg > ./call_graphs/call_graph_all.svg
          pyan3 "./pttools/**/*.py" -a -c -e --dot > ./call_graphs/call_graph_pttools.dot
          pyan3 "./pttools/**/*.py" -a -c -e --html > ./call_graphs/call_graph_pttools.html
          pyan3 "./pttools/**/*.py" -a -c -e --svg > ./call_graphs/call_graph_pttools.svg
          pyan3 "./pttools/bubble/*.py" -a -c -e --dot > ./call_graphs/call_graph_bubble.dot
          pyan3 "./pttools/bubble/*.py" -a -c -e --html > ./call_graphs/call_graph_bubble.html
          pyan3 "./pttools/bubble/*.py" -a -c -e --svg > ./call_graphs/call_graph_bubble.svg
          pyan3 "./pttools/ssmtools/*.py" -a -c -e --dot > ./call_graphs/call_graph_ssmtools.dot
          pyan3 "./pttools/ssmtools/*.py" -a -c -e --html > ./call_graphs/call_graph_ssmtools.html
          pyan3 "./pttools/ssmtools/*.py" -a -c -e --svg > ./call_graphs/call_graph_ssmtools.svg
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: Graph
          path: |
            call_graphs
            uml
          if-no-files-found: error
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    env:
      PRIMARY_PYTHON_VERSION: 3.8
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Print Python version
      run: python -V
    - name: Checkout
      uses: actions/checkout@v2
    - name: Load pip cache
      uses: actions/cache@v2
      with:
        path: .pip
        key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-
          pip-
    - name: Install requirements
      run: |
        pip --cache-dir=.pip install --upgrade pip
        pip --cache-dir=.pip install pytest pytest-cov pytest-pythonpath pytest-xdist
        pip --cache-dir=.pip install -r requirements.txt
    - name: Run tests with coverage
      run: coverage run
    - name: Create coverage reports
      run: |
      # Without pytest-pythonpath the PYTHONPATH would have to be set manually
      # PYTHONPATH="${PYTHONPATH}${PYTHONPATH:+:}./tests" pytest | tee test-output.txt
        pytest | tee test-output.txt
        coverage json
    - name: Upload results
      uses: actions/upload-artifact@v2
      if: ${{ matrix.python-version == env.PRIMARY_PYTHON_VERSION }}
      with:
        name: Coverage
        path: |
          test-output.txt
          coverage.xml
          coverage.json
          htmlcov
        if-no-files-found: error
    - name: Upload results to Codecov
      uses: codecov/codecov-action@v1
      if: ${{ matrix.python-version == env.PRIMARY_PYTHON_VERSION }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ github.workspace }}/coverage.xml
